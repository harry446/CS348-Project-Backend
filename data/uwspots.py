import pandas as pd
import random

random.seed(348)

lat_long = [
    [(43.473271850106116, -80.5420761054591),(43.472828054064244, -80.54344939646661),(43.47194045220353, -80.54299878535477),(43.47243875660746, -80.54094957767951)],
    [(43.47657866576546, -80.54533798054642),(43.47596443405133, -80.54701206328885),(43.474988475264226, -80.54628788142836),(43.475657315852914, -80.5445667738898)],
    [(43.470575426086185, -80.53880864622849),(43.469795778914225, -80.53914090089035),(43.46989624947511, -80.54062497171321),(43.46947427199707, -80.54034255525066)],
    [(43.46943009854583, -80.53995155472002),(43.46917516107982, -80.53977591579135),(43.46935331026561, -80.54078742672993),(43.4689064005387, -80.54046577471598)],
    [(43.47267390559198, -80.54384009115918),(43.471833790532195, -80.54340365110887),(43.47232348468726, -80.54454891932599),(43.47160466621636, -80.54404128692705)],
    [(43.47217758536102, -80.54546908066695),(43.47179752900309, -80.54489002781843),(43.471414380336874, -80.54597149416787),(43.47123825473185, -80.54507736844589)],
    [(43.47297785883122, -80.54636320639328),(43.472739940801645, -80.54534986390837),(43.472032360867075, -80.5467506608728),(43.471865506749644, -80.5459033703077)],
    [(43.47118369795933, -80.54317309954148),(43.47076119809594, -80.54425651073643),(43.47037484536889, -80.5437085786385),(43.47039969854222, -80.54262828069322)],
    [(43.470333629967264, -80.54401496652719),(43.470222920175566, -80.54340788266867),(43.46940049823144, -80.54367250896597),(43.4695902889041, -80.54308410461081)],
    [(43.47354547911104, -80.539708033505),(43.47265227729698, -80.53910393102773),(43.47330401115625, -80.54047366070878),(43.47251395877527, -80.53989863268231)],
    [(43.473492302389694, -80.54399496706455),(43.473300217271316, -80.5445168942675),(43.47292416153951, -80.54425593066603),(43.47308919347973, -80.54370045099999)],
    [(43.47404762101597, -80.54536264202429),(43.47352905818792, -80.544815181705),(43.473802977010415, -80.54610315414037),(43.473068157767536, -80.54563898719974)],
    [(43.47435304226184, -80.54658532584769), (43.473147910010375, -80.54578551705784),(43.47377706293398, -80.54822157589103),(43.472731424894526, -80.54734239676326)],
    [(43.47090844994518, -80.5451841534581),(43.468645440631256, -80.54424157341722),(43.47024160238882, -80.54792297093029),(43.468546485819346, -80.54610894896733)],
    [(43.46977996981049, -80.54742023018876),(43.468470314076065, -80.54616724789769),(43.469083137650415, -80.5491022227208),(43.46786242648896, -80.54761090140697)],
    [(43.46869061993894, -80.541354866153),(43.468296109626316, -80.54247300549854),(43.467896602888224, -80.54096953813236),(43.467550454806876, -80.54195685126022)],
    [(43.469558308781714, -80.54142332922473),(43.4693304309079, -80.54173118204768),(43.46868795937022, -80.54062046755094),(43.46856764558899, -80.54109459344059)],
    [(43.47026663654795, -80.54220706836787),(43.46994448601084, -80.54301581134114),(43.4696642577773, -80.54157466784741),(43.469403887073085, -80.54248070320844)],
    [(43.47359787187234, -80.54872117112478),(43.47029457526973, -80.54666718188547),(43.47055674825119, -80.55713323762266),(43.46830536766383, -80.5527306463719)],
    [(43.467664025916044, -80.54749667266756),(43.46849075115399, -80.54434482165506),(43.46538891914379, -80.54395084027848),(43.46658242844246, -80.54299158126602)],
    [(43.474862045637124, -80.53850569629807),(43.47318184464098, -80.53727549770501),(43.4742725067479, -80.5400666558336),(43.47268914526572, -80.53894671088803)],
    [(43.47147474501363, -80.5399879357178),(43.47101712185099, -80.5396255343535),(43.47109865266812, -80.54141942110678),(43.47054108488417, -80.54097004341504)],
    [(43.4710419591231, -80.5455067208644),(43.47023590307642, -80.54546328615088),(43.47069522124736, -80.54732477387365),(43.47016385285055, -80.54656156390732)],
    [(43.466528962886954, -80.5427425733496),(43.46590117238341, -80.5407929197169),(43.46544278154822, -80.54404005411222), (43.464501076427155, -80.54159612209376)],
    [(43.46944030866376, -80.54275308570513),(43.468793897004055, -80.5422217989122),(43.46910387304861, -80.54375315496245),(43.46842721597206, -80.54363856369338)],
    [(43.475515442415684, -80.54331306160206),(43.473585493449086, -80.54210150978406),(43.474845328231865, -80.54487921395219),(43.4731405242495, -80.54337954920184)],
    [(43.47256943499108, -80.53433824945387),(43.470998108412736, -80.53761533439497),(43.47165873117078, -80.53354498682924),(43.47045072980007, -80.53651647059527)],
    [(43.47162570019859, -80.53345395668352),(43.47036579128937, -80.53650346628149),(43.47067723189043, -80.53248513593704),(43.469934931488964, -80.53559926550037)],
    [(43.473926180314926, -80.54426036291864),(43.47355644102859, -80.54405174854539),(43.47376314594781, -80.54481399337068),(43.47339631701364, -80.54458933173797)]
]

def find_pair_range(lst):
    latitudes = [lat for lat, lon in lst]
    longitudes = [lon for lat, lon in lst]
    
    min_lat = min(latitudes)
    max_lat = max(latitudes)
    min_long = min(longitudes)
    max_long = max(longitudes)
    
    return {
        "min_lat": min_lat,
        "max_lat": max_lat,
        "min_long": min_long,
        "max_long": max_long
    }


def generate_random_lat_long(lat_long_range):
    lat = random.uniform(lat_long_range['min_lat'], lat_long_range['max_lat'])
    lon = random.uniform(lat_long_range['min_long'], lat_long_range['max_long'])
    return lat, lon

def random_float(start, end, increment):
    range_size = int((end - start) / increment) + 1
    random_value = random.randint(0, range_size - 1) * increment + start
    return round(random_value, 1)

# Function to generate parking spots for each lot
def generate_parking_spots(lots_df):
    parking_spots = []
    for index, lot in lots_df.iterrows():
        lid = lot['lid']
        capacity = lot['capacity']
        lat_long_range = find_pair_range(lat_long[index])
        accessible_spots = random.randint(3, 5)
        remaining_capacity = capacity - accessible_spots
        
        permit_spots = random.randint(0, remaining_capacity)
        free_pay_spots = remaining_capacity - permit_spots

        spot_id = 1
        # Add accessible spots
        acc_stay = random_float(1.0, 4.0, 0.5)
        for _ in range(accessible_spots):
            lat, lon = generate_random_lat_long(lat_long_range)
            parking_spots.append([lid, spot_id, 'accessible', lat, lon, acc_stay, 0])
            spot_id += 1
        
        # Add permit spots
        for _ in range(permit_spots):
            lat, lon = generate_random_lat_long(lat_long_range)
            parking_spots.append([lid, spot_id, 'permit', lat, lon, None, 0])
            spot_id += 1
        
        # Add free/pay spots
        need_pay = random.choice([True,False])
        price = random_float(3.0, 8.0, 0.5)
        other_stay = random_float(1.0, 8.0,0.5)
        for _ in range(free_pay_spots):
            lat, lon = generate_random_lat_long(lat_long_range)
            if need_pay:
                parking_spots.append([lid, spot_id, 'pay', lat, lon, other_stay, price])
            else:
                parking_spots.append([lid, spot_id, 'free', lat, lon, other_stay, 0])
            spot_id += 1

    return pd.DataFrame(parking_spots, columns=['lid', 'sid', 'parking_type', 'latitude', 'longitude', 'max_stay', 'price'])

# Load the lots data
file_path = '/Users/lilywang/Desktop/lots.xlsx'
lots_df = pd.read_excel(file_path)

# Generate the parking spots data
parking_spots_df = generate_parking_spots(lots_df)

output_file_path1 = '/Users/lilywang/Desktop/spots.txt'
parking_spots_df.to_csv(output_file_path1, sep=',', index=False)

output_file_path2 = '/Users/lilywang/Desktop/lots.txt'
lots_df.to_csv(output_file_path2, sep=',', index=False)
# Display the generated parking spots data
parking_spots_df.head()